<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Welcome! | Sümer Cip</title><link>https://sumercip.com/posts/</link><description>Recent content in Posts on Welcome! | Sümer Cip</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 30 Dec 2024 18:48:06 +0300</lastBuildDate><atom:link href="https://sumercip.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>May thy bits chip and shatter: Patterns for Building High-Performance Observability Pipelines at Scale</title><link>https://sumercip.com/posts/patterns-for-building-high-perf-observability-pipelines/</link><pubDate>Mon, 30 Dec 2024 18:48:06 +0300</pubDate><guid>https://sumercip.com/posts/patterns-for-building-high-perf-observability-pipelines/</guid><description>&lt;h1 id="motivation"&gt;Motivation&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://sumercip.com/sandworm.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;As seen from the title, I’m a huge &lt;em&gt;Dune&lt;/em&gt; fan. Much like &lt;a href="https://en.wikipedia.org/wiki/Sandworm_(Dune)"&gt;sandworms&lt;/a&gt; lurking beneath the surface, ready to appear unexpectedly, the scale and complexity of observability data can be just as massive, unpredictable, and a little terrifying.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“But I do see a way. There is a narrow way through.”&lt;/br&gt;
&amp;ndash; Paul Muad&amp;rsquo;Dib Atreides, Dune Part Two&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sci-fi analogies aside, designing high-throughput observability data pipelines is a fascinating intersection of datastore design and architecture, packed with unique challenges.&lt;/p&gt;</description></item><item><title>In the Making of Python Fitter and Faster</title><link>https://sumercip.com/posts/making-python-fitter-and-faster/</link><pubDate>Fri, 04 Oct 2024 18:49:37 +0300</pubDate><guid>https://sumercip.com/posts/making-python-fitter-and-faster/</guid><description>&lt;h1 id="pythons-performance-revolution"&gt;Python’s Performance Revolution&lt;/h1&gt;
&lt;p&gt;&lt;img src="https://sumercip.com/yess.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;Since Python 3.11, there has been a strong, ongoing effort to make Python faster, and the results are clear. Performance improvements are real, and the work continues.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s both refreshing and surprising to see such significant speed gains in a language that&amp;rsquo;s nearly 30 years old.&lt;/p&gt;
&lt;p&gt;But make no mistake: there&amp;rsquo;s no magic here. In my humble opinion, the success can be attributed to a few key factors:&lt;/p&gt;</description></item><item><title>Inside the Go CPU profiler</title><link>https://sumercip.com/posts/inside-the-go-cpu-profiler/</link><pubDate>Mon, 26 Sep 2022 18:42:25 +0300</pubDate><guid>https://sumercip.com/posts/inside-the-go-cpu-profiler/</guid><description>&lt;p&gt;Go is one of its kind when it comes to profiling. It includes powerful and opinionated(!) profilers inside the runtime. Other languages like
Ruby, Python, or Node.js, contains profilers or a few APIs for writing profilers. But they are limited in scope compared to what Go offers out of the box. If you want to learn more about the types of observability tools that Go provides, I highly recommend Felix Geisendörfer&amp;rsquo;s
&lt;a href="https://github.com/DataDog/go-profiler-notes/blob/main/guide/README.md"&gt;The Busy Developer&amp;rsquo;s Guide to Go Profiling, Tracing and Observability&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Improve zsh startup time via lazyload</title><link>https://sumercip.com/posts/lazyload-zsh/</link><pubDate>Fri, 31 Dec 2021 11:29:57 +0300</pubDate><guid>https://sumercip.com/posts/lazyload-zsh/</guid><description>&lt;h1 id="my-shell-is-slooow"&gt;My shell is slooow!&lt;/h1&gt;
&lt;p&gt;This is my first blog post for years. I have been finding excuses for not writing one over
the years, but I feel this is the right time.&lt;/p&gt;
&lt;p&gt;I was coding as usual when I started something odd with my shell. I have done few adjustments
to my &lt;code&gt;.zshrc&lt;/code&gt; file and out of a sudden it became very slow to spawn a new shell. As a person
who has a obsession with performance, it became my duty to find out the problem.&lt;/p&gt;</description></item></channel></rss>